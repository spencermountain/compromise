import test from 'tape'
import nlp from '../_lib.js'
const here = '[two/actors] '

const arr = [
  'accountant',
  'air traffic controller',
  'architect',
  'artist',
  'attorney',
  'banker',
  'bartender',
  'barber',
  'bookkeeper',
  'builder',
  'businessman',
  'businesswoman',
  'businessperson',
  'butcher',
  'carpenter',
  'cashier',
  'chef',
  // 'coach',
  'dental hygienist',
  'dentist',
  'designer',
  'developer',
  'dietician',
  'doctor',
  'economist',
  'editor',
  'electrician',
  'chairman',
  'chairwoman',
  'Anesthesiologist',
  'Anesthesiology Fellow',
  'Certified Registered Nurse Anesthetist',
  'Registered Respiratory Therapist',
  'Anesthesiologist Assistant',
  'Cardiologist',
  'Cardiology Physician Assistant',
  'Cardiac Scientist',
  'Cardiovascular Technologist',
  'Intensivist',
  'Neonatologist',
  // 'Critical Care Medicine Physician Assistant',
  // 'Critical Care Nurse Practitioner',
  // 'Critical Care Registered Nurse',
  // 'Critical Care Respiratory Therapist',
  'Dentist',
  'Dental Hygienist',
  'Dental Assistant',
  'Dental Technician',
  'Dermatologist',
  'Dermatology Physician Assistant',
  'Dietitian',
  'Emergency physician',
  'Emergency Physician Assistant',
  'Emergency Nurse Practitioner',
  'Chief brand officer',
  'Chief design officer',
  "Archaeologist",
  "Astronaut",
  "Astronomer",
  "Biochemist",
  "Biologist",
  "Chemist",
  "Ecologist",
  "Forester",
  "Geographer",
  "Naturalist",
  "Oceanographer",
  "Paleontologist",
  "Pathologist",
  "Anthropologist",
  "Economist",
  "Historian",
  "Linguist",
  "Political scientist",
  "Sociologist",
  "Urban planner",
  "Biologist",
  "Botanist",
  "Clinical pharmaceutical scientist",
  "Herpetologist",
  "Medical laboratory scientist",
  "Microbiologist",
  "Neuroscientist",
  "Physician",
  "Veterinarian",
  "Zoologist",
  "Computer operator",
  "Computer repair technician",
  "Computer scientist",
  "Computer analyst",
  "Application analyst",
  "Scrum master",
  "Security engineer",
  "Software analyst",
  "Software architect",
  "Software engineer",
  "Software project manager",
  "Software quality analyst",
  "Software test engineer",
  "Solution architect",
  "Support technician",
  "System administrator",
  "Systems analyst",
  // "Systems architect",
  "User experience designer",
  "User interaction designer",
  "User researcher",
  "Video Game Developer",
  "Visual designer",
  "Virtual Assistant",
  "Web developer",
  "Website administrator",
  "Arborist",
  "Auto mechanic",
  "Construction worker",
  "Factory worker",
  "station attendant",
  "Foreman",
  "Mechanic",
  "Moldmaker",
  "Patternmaker",
  "Plant operator",
  "Plumber",
  "Shop foreman",
  "Stationary engineer",
  "Welder",
  "Woodworker",
  "Dressmaker",
  "Embroiderer",
  "Author",
  "Blogger",
  "Book coach",
  "Commissioning editor",
  "Copy editor",
  "Creative consultant",
  "Dog writer",
  "Freelancer",
  "Ghostwriter",
  "Script coordinator",
  "Script doctor",
  "Songwriter",
  "Speechwriter",
  "Staff writer",
  "Technical writer",
  "Writer",
  "poet",
  "Screenwriter",
  // "Investigative Journalist",
  "Journalist",
  // "Literary editor",
  "Producer",
  "Director",
  "Playwright",
  "Scenographer",
  "Lighting designer",
  "Costume designer",
  "Set designer",
  "Sound designer",
  "Composer",
  "Music director",
  "Choreographer",
  "Fight director",
  "Intimacy coordinator",
  "Production manager",
  "Showrunner",
  "Costume designer",
  "voice actor",
  "weatherman",
  "Actor",
  "Athlete",
  "Beatboxer",
  "Circus performer",
  "Clown",
  // "Club Hostess",
  "Comedian",
  "Dancer",
  "Drag queen",
  "Drag king",
  "Emcee",
  "Filmmaker",
  "Flair bartender",
  "Geisha",
  "Illusionist",
  "Internet celebrity",
  "Itinerant poet",
  "Japanese idol",
  "Magician",
  // "Master of ceremonies",
  "Mime",
  "Monologist",
  "Musician",
  "Painter",
  "Party princess",
  "Performer",
  "Photographer",
  "Podcaster",
  "Poet",
  "Radio personality",
  "Rapper",
  "Ring girl",
  "Ringmaster",
  "Shamakhi dancers",
  "Showgirl",
  "Showman",
  "Showrunner",
  "Singer",
  "Streamer",
  "Street performer",
  "Stunt performer",
  "Theatre practitioner",
  "TikToker",
  "TV celebrity",
  "Writer",
  "YouTuber",
  "Choreographer",
  "Dance critic",
  "Dance historian",
  "Dance scholar",
  "Dance therapist",
  "Ballet historian",
  "Ballet master",
  "ballet dancer",
  "Exotic dancer",
  "showgirl",
  "Accessory designer",
  "Advertising designer",
  "Animator",
  "Architect",
  "Art administrator",
  "Art therapist",
  "Artisan",
  "Ceramics artist",
  "Chief creative officer",
  "Colorist",
  "Comedian",
  "Concept Artist",
  "Curator",
  "Dancer",
  "Design director",
  "Design strategist",
  "Essayist",
  "Event planner",
  "Fashion designer",
  "Fine artist",
  "Game designer",
  "Graphic designer",
  "Hairstylist",
  "Illustrator",
  "Interior designer",
  "Jewellery designer",
  "Lyricist",
  // "Make-up artist",
  "Marine designer",
  "Media designer",
  "Musician",
  "Party planner",
  "Photographer",
  "Photojournalist",
  "Production designer",
  "Sculptor",
  "Set decorator",
  "Singer",
  "Tattoo artist",
  "Web designer",
  "Wedding planner",
  "Writer",
  'Taxicab driver',
  'Test driver',
  'Train driver',
  'Truck driver',
  'Bus driver',
  'Chauffeur',
  'pilot',
  'Customer representative',
  'Cadet',
  'Captain',
  'Police captain',
  'Chief constable',
  'Chief deputy',
  'Chief inspector',
  'Chief of police',
  'Chief sergeant',
  'Chief superintendent',
  'Circle officer',
  'Colonel',
  'Commander',
  'Deputy chief constable',
  'Deputy commissioner',
  'Detective',
  'Inspector',
  // 'Director general',
  'Senior inspector',
  'Senior sergeant',
  'Senior staff sergeant',
  'Senior station inspector',
  'Senior trooper',
  'Sergeant',
  'Special agent',
  'Special constable',
  'Staff sergeant',
  'Station inspector',
  'Station sergeant',
  'Assistant superintendent',
  'Fire marshal',
]
//after we change pos, untag propernoun
test('tag-actors', function (t) {
  arr.forEach(str => {
    const m = nlp(str).match('#Actor+')
    t.equal(m.text(), str, here + str)
  })
  t.end()
})
